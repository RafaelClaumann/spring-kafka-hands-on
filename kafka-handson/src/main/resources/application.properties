spring.application.name=kafka-hands-on
server.port=8081

# nosso producer/consumer usam o mesmo broker entao podemos usar esta config geral
# spring.kafka.bootstrap-servers=localhost:9092

# ----- PRODUCER -----
# lista de servidores/nós do kafka que temos
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# ----- CONSUMER -----
# lista de servidores(broker) do kafka para consumir
spring.kafka.consumer.bootstrap-servers=localhost:9092

# configurando group id e client id
spring.kafka.consumer.group-id=consumer-handson-java

# não podemos ter mesmo client-id no mesmo group-id
# cuidado com essa propriedade
#spring.kafka.consumer.client-id=1

# latest = consumer começa a ler as mensagens depois que ele subir
# earliest = consumer recebe todo o historio de mensagens anteriores
spring.kafka.consumer.auto-offset-reset=earliest

# config deserializer do consumer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# nesse caso simples, o produtor recebe e envia o mesmo tipo de objeto
# produtor_recebe_classe:produtor_envia_classe
# podemos ter diferentes type.mappings para diferentes classes
spring.kafka.consumer.properties.spring.json.type.mapping=br.com.kafka.handson.models.Customer:br.com.kafka.handson.models.Customer,\
														  br.com.kafka.handson.models.VipCustomer:br.com.kafka.handson.models.VipCustomer


# ----- APP CONFIG -----
app.kafka.topic.created-customer=created-customer


